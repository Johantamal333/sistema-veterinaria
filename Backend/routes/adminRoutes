const express = require("express");
const { connection } = require("../config/config.db");
const verificarToken = require("../middleware/authMiddleware");

const router = express.Router();

router.get("/perfil", verificarToken, async (req, res) => {
  try {
    connection.query(
      "SELECT id, username, email FROM administradores WHERE id = ?",
      [req.user.id],
      (err, rows) => {
        if (err) {
          console.error("❌ Error en la consulta:", err);
          return res.status(500).json({ mensaje: "Error en el servidor" });
        }
        if (rows.length === 0) {
          return res.status(404).json({ mensaje: "Usuario no encontrado" });
        }
        res.json(rows[0]);
      }
    );
  } catch (error) {
    res.status(500).json({ mensaje: "Error en el servidor" });
  }
});

router.get("/admin", verificarToken, async (req, res) => {
  try {
    connection.query(
      "SELECT id, username, email FROM administradores",
      (err, rows) => {
        if (err) {
          return res.status(500).json({ mensaje: "Error al obtener administradores" });
        }
        res.json(rows);
      }
    );
  } catch (error) {
    res.status(500).json({ mensaje: "Error al obtener administradores" });
  }
});

router.post("/admin", verificarToken, async (req, res) => {
  const { username, password, email } = req.body;
  try {
    connection.query(
      "INSERT INTO administradores (username, password, email) VALUES (?, ?, ?)",
      [username, password, email],
      (err, result) => {
        if (err) {
          return res.status(500).json({ mensaje: "Error al crear administrador" });
        }
        res.status(201).json({ mensaje: "Administrador creado con éxito", id: result.insertId });
      }
    );
  } catch (error) {
    res.status(500).json({ mensaje: "Error al crear administrador" });
  }
});

router.put("/admin/:id", verificarToken, async (req, res) => {
  const { id } = req.params;
  const { username, password, email } = req.body;

  try {
    connection.query(
      "UPDATE administradores SET username = ?, password = ?, email = ? WHERE id = ?",
      [username, password, email, id],
      (err, result) => {
        if (err) {
          return res.status(500).json({ mensaje: "Error al actualizar administrador" });
        }
        if (result.affectedRows === 0) {
          return res.status(404).json({ mensaje: "Administrador no encontrado" });
        }
        res.json({ mensaje: "Administrador actualizado con éxito" });
      }
    );
  } catch (error) {
    res.status(500).json({ mensaje: "Error al actualizar administrador" });
  }
});

router.delete("/admin/:id", verificarToken, async (req, res) => {
  const { id } = req.params;

  try {
    connection.query(
      "DELETE FROM administradores WHERE id = ?",
      [id],
      (err, result) => {
        if (err) {
          return res.status(500).json({ mensaje: "Error al eliminar administrador" });
        }
        if (result.affectedRows === 0) {
          return res.status(404).json({ mensaje: "Administrador no encontrado" });
        }
        res.json({ mensaje: "Administrador eliminado con éxito" });
      }
    );
  } catch (error) {
    res.status(500).json({ mensaje: "Error al eliminar administrador" });
  }
});

module.exports = router;
