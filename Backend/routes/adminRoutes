const express = require("express");
const db = require("../config/config.db");
const verificarToken = require("../middleware/authMiddleware");

const router = express.Router();

// 📌 Obtener información del administrador autenticado
router.get("/perfil", verificarToken, async (req, res) => {
  try {
    const [rows] = await db.execute("SELECT id, username, email FROM administradores WHERE id = ?", [req.user.id]);
    if (rows.length === 0) return res.status(404).json({ mensaje: "Usuario no encontrado" });

    res.json(rows[0]);
  } catch (error) {
    res.status(500).json({ mensaje: "Error en el servidor" });
  }
});

// 📌 Obtener lista de administradores
router.get("/admin", verificarToken, async (req, res) => {
  try {
    const [rows] = await db.execute("SELECT id, username, email FROM administradores");
    res.json(rows);
  } catch (error) {
    res.status(500).json({ mensaje: "Error al obtener administradores" });
  }
});

// 📌 Crear un nuevo administrador
router.post("/admin", verificarToken, async (req, res) => {
  const { username, password, email } = req.body;
  try {
    const [result] = await db.execute("INSERT INTO administradores (username, password, email) VALUES (?, ?, ?)", [username, password, email]);
    res.status(201).json({ mensaje: "Administrador creado con éxito", id: result.insertId });
  } catch (error) {
    res.status(500).json({ mensaje: "Error al crear administrador" });
  }
});

// 📌 Editar un administrador existente
router.put("/admin/:id", verificarToken, async (req, res) => {
  const { id } = req.params;
  const { username, password, email } = req.body;

  try {
    const [result] = await db.execute("UPDATE administradores SET username = ?, password = ?, email = ? WHERE id = ?", [username, password, email, id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ mensaje: "Administrador no encontrado" });
    }

    res.json({ mensaje: "Administrador actualizado con éxito" });
  } catch (error) {
    res.status(500).json({ mensaje: "Error al actualizar administrador" });
  }
});

// 📌 Eliminar un administrador
router.delete("/admin/:id", verificarToken, async (req, res) => {
  const { id } = req.params;
  
  try {
    const [result] = await db.execute("DELETE FROM administradores WHERE id = ?", [id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ mensaje: "Administrador no encontrado" });
    }

    res.json({ mensaje: "Administrador eliminado con éxito" });
  } catch (error) {
    res.status(500).json({ mensaje: "Error al eliminar administrador" });
  }
});

// 📌 Operaciones CRUD para Donadores
router.get("/donantes", verificarToken, async (req, res) => {
  try {
    const [rows] = await db.execute("SELECT id, nombre, email FROM donantes");
    res.json(rows);
  } catch (error) {
    res.status(500).json({ mensaje: "Error al obtener donantes" });
  }
});

// 📌 Crear un nuevo donante
router.post("/donantes", verificarToken, async (req, res) => {
  const { nombre, email } = req.body;
  try {
    const [result] = await db.execute("INSERT INTO donantes (nombre, email) VALUES (?, ?)", [nombre, email]);
    res.status(201).json({ mensaje: "Donante creado con éxito", id: result.insertId });
  } catch (error) {
    res.status(500).json({ mensaje: "Error al crear donante" });
  }
});

// 📌 Editar un donante
router.put("/donantes/:id", verificarToken, async (req, res) => {
  const { id } = req.params;
  const { nombre, email } = req.body;

  try {
    const [result] = await db.execute("UPDATE donantes SET nombre = ?, email = ? WHERE id = ?", [nombre, email, id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ mensaje: "Donante no encontrado" });
    }

    res.json({ mensaje: "Donante actualizado con éxito" });
  } catch (error) {
    res.status(500).json({ mensaje: "Error al actualizar donante" });
  }
});

// 📌 Eliminar un donante
router.delete("/donantes/:id", verificarToken, async (req, res) => {
  const { id } = req.params;

  try {
    const [result] = await db.execute("DELETE FROM donantes WHERE id = ?", [id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ mensaje: "Donante no encontrado" });
    }

    res.json({ mensaje: "Donante eliminado con éxito" });
  } catch (error) {
    res.status(500).json({ mensaje: "Error al eliminar donante" });
  }
});

// 📌 Operaciones CRUD para Pacientes
router.get("/pacientes", verificarToken, async (req, res) => {
  try {
    const [rows] = await db.execute("SELECT id, nombre, edad FROM pacientes");
    res.json(rows);
  } catch (error) {
    res.status(500).json({ mensaje: "Error al obtener pacientes" });
  }
});

// 📌 Crear un nuevo paciente
router.post("/pacientes", verificarToken, async (req, res) => {
  const { nombre, edad } = req.body;
  try {
    const [result] = await db.execute("INSERT INTO pacientes (nombre, edad) VALUES (?, ?)", [nombre, edad]);
    res.status(201).json({ mensaje: "Paciente creado con éxito", id: result.insertId });
  } catch (error) {
    res.status(500).json({ mensaje: "Error al crear paciente" });
  }
});

// 📌 Editar un paciente
router.put("/pacientes/:id", verificarToken, async (req, res) => {
  const { id } = req.params;
  const { nombre, edad } = req.body;

  try {
    const [result] = await db.execute("UPDATE pacientes SET nombre = ?, edad = ? WHERE id = ?", [nombre, edad, id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ mensaje: "Paciente no encontrado" });
    }

    res.json({ mensaje: "Paciente actualizado con éxito" });
  } catch (error) {
    res.status(500).json({ mensaje: "Error al actualizar paciente" });
  }
});

// 📌 Eliminar un paciente
router.delete("/pacientes/:id", verificarToken, async (req, res) => {
  const { id } = req.params;

  try {
    const [result] = await db.execute("DELETE FROM pacientes WHERE id = ?", [id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ mensaje: "Paciente no encontrado" });
    }

    res.json({ mensaje: "Paciente eliminado con éxito" });
  } catch (error) {
    res.status(500).json({ mensaje: "Error al eliminar paciente" });
  }
});

// 📌 Operaciones CRUD para Donaciones
router.get("/donaciones", verificarToken, async (req, res) => {
  try {
    const [rows] = await db.execute("SELECT id, monto, fecha FROM donaciones");
    res.json(rows);
  } catch (error) {
    res.status(500).json({ mensaje: "Error al obtener donaciones" });
  }
});

// 📌 Crear una nueva donación
router.post("/donaciones", verificarToken, async (req, res) => {
  const { monto, fecha } = req.body;
  try {
    const [result] = await db.execute("INSERT INTO donaciones (monto, fecha) VALUES (?, ?)", [monto, fecha]);
    res.status(201).json({ mensaje: "Donación creada con éxito", id: result.insertId });
  } catch (error) {
    res.status(500).json({ mensaje: "Error al crear donación" });
  }
});

// 📌 Editar una donación
router.put("/donaciones/:id", verificarToken, async (req, res) => {
  const { id } = req.params;
  const { monto, fecha } = req.body;

  try {
    const [result] = await db.execute("UPDATE donaciones SET monto = ?, fecha = ? WHERE id = ?", [monto, fecha, id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ mensaje: "Donación no encontrada" });
    }

    res.json({ mensaje: "Donación actualizada con éxito" });
  } catch (error) {
    res.status(500).json({ mensaje: "Error al actualizar donación" });
  }
});

// 📌 Eliminar una donación
router.delete("/donaciones/:id", verificarToken, async (req, res) => {
  const { id } = req.params;

  try {
    const [result] = await db.execute("DELETE FROM donaciones WHERE id = ?", [id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ mensaje: "Donación no encontrada" });
    }

    res.json({ mensaje: "Donación eliminada con éxito" });
  } catch (error) {
    res.status(500).json({ mensaje: "Error al eliminar donación" });
  }
});

module.exports = router;
