const express = require("express");
const { connection } = require("../config/config.db");
const bcrypt = require('bcryptjs');
const verificarToken = require("../middleware/authMiddleware");

const router = express.Router();

router.get("/perfil", async (req, res) => {
  try {
    connection.query(
      "SELECT id, username, email, rol_id FROM administradores WHERE id = ?",
      [req.user.id],
      (err, rows) => {
        if (err) {
          console.error("‚ùå Error en la consulta:", err);
          return res.status(500).json({ mensaje: "Error en el servidor" });
        }
        if (rows.length === 0) {
          return res.status(404).json({ mensaje: "Usuario no encontrado" });
        }
        res.json(rows[0]);
      }
    );
  } catch (error) {
    res.status(500).json({ mensaje: "Error en el servidor" });
  }
});

router.get("/admin", verificarToken, async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 5;
    const offset = (page - 1) * limit;

    // Consulta paginada
    const queryData = `
      SELECT id, username, email 
      FROM administradores 
      LIMIT ? OFFSET ?
    `;

    // Consulta total de registros
    const queryCount = "SELECT COUNT(*) AS total FROM administradores";

    connection.query(queryCount, (errCount, countResult) => {
      if (errCount) return res.status(500).json({ mensaje: "Error al contar registros" });

      connection.query(queryData, [limit, offset], (err, rows) => {
        if (err) return res.status(500).json({ mensaje: "Error al obtener administradores" });

        res.json({
          data: rows,
          total: countResult[0].total,
          page: page,
          totalPages: Math.ceil(countResult[0].total / limit)
        });
      });
    });
  } catch (error) {
    res.status(500).json({ mensaje: "Error del servidor" });
  }
  
});

router.post("/admin", async (req, res) => {
  const { username, password, email } = req.body;

  try {
    // 1. Verificar si el usuario ya existe
    const checkUser = await new Promise((resolve, reject) => {
      connection.query(
        "SELECT id FROM administradores WHERE username = ? OR email = ?",
        [username, email],
        (err, results) => {
          if (err) reject(err);
          resolve(results);
        }
      );
    });

    if (checkUser.length > 0) {
      return res.status(409).json({
        mensaje: "El nombre de usuario o correo electr√≥nico ya est√° registrado",
        codigo: "USUARIO_DUPLICADO"
      });
    }

    // 2. Hash de la contrase√±a
    const hashedPassword = await bcrypt.hash(password, 10);

    // 3. Insertar nuevo administrador
    const result = await new Promise((resolve, reject) => {
      connection.query(
        "INSERT INTO administradores (username, password, email) VALUES (?, ?, ?)",
        [username, hashedPassword, email],
        (err, result) => {
          if (err) reject(err);
          resolve(result);
        }
      );
    });

    res.status(201).json({
      mensaje: "Administrador creado con √©xito",
      id: result.insertId
    });

  } catch (error) {
    // Manejo espec√≠fico de error de duplicaci√≥n
    if (error.code === 'ER_DUP_ENTRY') {
      return res.status(409).json({
        mensaje: "El nombre de usuario o correo electr√≥nico ya est√° registrado",
        codigo: "USUARIO_DUPLICADO"
      });
    }
    
    console.error("Error en el proceso:", error);
    res.status(500).json({
      mensaje: "Error al crear administrador",
      codigo: "ERROR_SERVIDOR"
    });
  }
});
router.put("/admin/:id", verificarToken, async (req, res) => {
  const { id } = req.params;
  const { username, password, email } = req.body;

  try {
    let query;
    let params;
    
    if (password) {
      const hashedPassword = await bcrypt.hash(password, 10);
      query = "UPDATE administradores SET username = ?, password = ?, email = ? WHERE id = ?";
      params = [username, hashedPassword, email, id];
    } else {
      query = "UPDATE administradores SET username = ?, email = ? WHERE id = ?";
      params = [username, email, id];
    }

    connection.query(query, params, (err, result) => {
      if (err) return res.status(500).json({ mensaje: "Error al actualizar" });
      if (result.affectedRows === 0) return res.status(404).json({ mensaje: "Admin no encontrado" });
      res.json({ mensaje: "Actualizaci√≥n exitosa" });
    });
  } catch (error) {
    res.status(500).json({ mensaje: "Error del servidor" });
  }
});

router.delete("/admin/:id", verificarToken, async (req, res) => {
  const { id } = req.params;

  try {
    connection.query(
      "DELETE FROM administradores WHERE id = ?",
      [id],
      (err, result) => {
        if (err) {
          return res.status(500).json({ mensaje: "Error al eliminar administrador" });
        }
        if (result.affectedRows === 0) {
          return res.status(404).json({ mensaje: "Administrador no encontrado" });
        }
        res.json({ mensaje: "Administrador eliminado con √©xito" });
      }
    );
  } catch (error) {
    res.status(500).json({ mensaje: "Error al eliminar administrador" });
  }
});

router.get("/admin/:id", verificarToken, (req, res) => {
  try {
    connection.query(
      "SELECT id, username, email FROM administradores WHERE id = ?",
      [req.params.id],
      (err, rows) => {
        if (err) return res.status(500).json({ mensaje: "Error al obtener admin" });
        if (rows.length === 0) return res.status(404).json({ mensaje: "Admin no encontrado" });
        res.json(rows[0]);
      }
    );
  } catch (error) {
    res.status(500).json({ mensaje: "Error del servidor" });
  }
});
// üìå Total de administradores
router.get("/total", verificarToken, (req, res) => { // <- Cambiar aqu√≠
  connection.query(
    "SELECT COUNT(*) AS total FROM administradores",
    (err, results) => {
      if (err) {
        console.error("‚ùå Error al obtener total de administradores:", err);
        return res.status(500).json({ mensaje: "Error en el servidor" });
      }
      res.json({ total: results[0].total });
    }
  );
});
module.exports = router;